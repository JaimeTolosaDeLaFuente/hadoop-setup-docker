// Create streaming DataFrame reading from a socket

// Run with # $ pyspark --master local[2]
// Test with

// Test with
// $ python $DEVSH/scripts/streamtest-network.py locahost 1234 10 $DEVDATA/devicestatus_stream/* 

import org.apache.spark.sql.functions

val hostname = "localhost"
val port = 1234
val lines = spark.readStream.format("socket").option("host", hostname).option("port", port)

val linesDF = lines.load()
linesDF.printSchema

val statusDF = linesDF. 
  withColumn("model", functions.split($"value", ",") (0)). 
  withColumn("dev_id", functions.split($"value", ",") (1)). 
  withColumn("dev_temp", functions.split($"value", ",") (2).cast("integer")). 
  withColumn("signal", functions.split($"value", ",") (3).cast("integer")). 
  withColumn("wifi_status", functions.split($"value", ",") (4)). 
  withColumn("bluetooth_status", functions.split($"value", ",") (5)). 
  withColumn("battery", functions.split($"value", ",") (6).cast("int")). 
  withColumn("lat", functions.split($"value", ",") (7).cast("float")). 
  withColumn("lon", functions.split($"value", ",") (8).cast("float"))

val statusFilterDF = statusDF.select("dev_id","dev_temp","signal").where("model='Sorrento F41L'")
val statusQuery = statusFilterDF.writeStream.outputMode("append").option("truncate","false").format("console").trigger(ProcessingTime("2 seconds")).start()
statusQuery.stop
