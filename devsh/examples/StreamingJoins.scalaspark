// Run with 
// $ pyspark --master local[2]

// Test with 
// $ kafka-topics --create --zookeeper localhost:2181 --partitions 2 --replication-factor 1 --topic status
// $ $DEVSH/scripts/streamtest-kafka.sh status localhost:9092 5 $DEVDATA/devicestatus_stream


// reduce partitions so that joins take a reasonable amount of time
spark.conf.set("spark.sql.shuffle.partitions","4")

// streaming status DF 
val kafkaDF = spark.readStream.format("kafka").option("kafka.bootstrap.servers", "localhost:9092").option("subscribe", "status").load()

val statusStreamDF = kafkaDF.select($"timestamp",split($"value", ",").alias("status_vals"))

// static DF
val accountDevStaticDF = spark.read.parquet("file:///home/training/training_materials/devsh/data/static_data/name_dev/")

// inner join with static/streaming
val statusWithAccountDF = statusStreamDF.join(accountDevStaticDF, $"account_device_id" === $"status_vals"(1)).select("account_device_id","acct_num","timestamp")

val statusWithAccountQuery = statusWithAccountDF.writeStream.outputMode("append").format("console").option("truncate","false").start()

statusWithAccountQuery.stop()


// ------ stream/stream joins ------
// NOTE: the stream-stream examples are indented to 
// demonstrate correct syntax and usage based on available
// example data.
// They do not reflect a typical use case.

val kafkaActivationsDF = spark.readStream.format("kafka").option("kafka.bootstrap.servers", "localhost:9092").option("subscribe", "activations").load()

import org.apache.spark.sql.types._
val activationsSchema = StructType( List(
	  StructField("acct_num", IntegerType),
	  StructField("dev_id", StringType),
	  StructField("phone", StringType),
	  StructField("model", StringType)))

val activationsStreamDF = kafkaActivationsDF.select($"timestamp",from_json($"value".cast("string"), activationsSchema).alias("activation"))

val statusDF = statusStreamDF.select($"timestamp".alias("timestamp_status"),$"status_vals"(0).alias("smodel"),$"status_vals"(1).alias("dev_id"))

val activationsDF=activationsStreamDF.select($"timestamp".alias("timestamp_act"),$"activation"("model").alias("amodel"),$"activation"("dev_id").alias("dev_id"))

val joinedDataFrame=statusDF.join(activationsDF,"dev_id")

// Watermark versions of the DFs
val statusWDF=statusDF.withWatermark("timestamp_status","10 minutes")

val actWDF=activationsDF.withWatermark("timestamp_act","10 minutes")

// specify right-side watermark and time range
// (these are the same with different syntax)

val joinedDataFrame=statusDF.join(actWDF,(actWDF("dev_id") === statusDF("dev_id")) && (statusDF("timestamp_status") > actWDF("timestamp_act")),"left_outer")

val joinQuery=joinedDataFrame.writeStream.outputMode("append").format("console").option("truncate","false").start()

joinQuery.stop()