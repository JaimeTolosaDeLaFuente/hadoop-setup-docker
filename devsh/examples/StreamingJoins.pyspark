# Run with 
# $ pyspark --master local[2]

# Test with 
# $ kafka-topics --create --zookeeper localhost:2181 --partitions 2 --replication-factor 1 --topic status
# $ $DEVSH/scripts/streamtest-kafka.sh status localhost:9092 5 $DEVDATA/devicestatus_stream



# reduce partitions so that joins take a reasonable amount of time
spark.conf.set("spark.sql.shuffle.partitions","4")

from pyspark.sql.functions import *

# streaming status DF 
kafkaDF = spark.readStream.format("kafka").option("kafka.bootstrap.servers", "localhost:9092").option("subscribe", "status").load()

statusStreamDF = kafkaDF.select("timestamp",split(kafkaDF.value, ",").alias("status_vals"))

# static DF
accountDevStaticDF = spark.read.parquet("file:///home/training/training_materials/devsh/data/static_data/name_dev/")

# inner join with static/streaming
statusWithAccountDF = statusStreamDF.join(accountDevStaticDF, accountDevStaticDF.account_device_id == statusStreamDF.status_vals[1]).select("account_device_id","acct_num","timestamp")
statusWithAccountDF.printSchema()

statusWithAccountQuery = statusWithAccountDF.writeStream.outputMode("append").format("console").option("truncate","false").start()

statusWithAccountQuery.stop()


# ------ stream/stream joins ------
# NOTE: the stream-stream examples are indented to 
# demonstrate correct syntax and usage based on available
# example data.
# They do not reflect a typical or useful use case.

kafkaActivationsDF = spark.readStream.format("kafka").option("kafka.bootstrap.servers", "localhost:9092").option("subscribe", "activations").load()

from pyspark.sql.types import *
activationsSchema = StructType([ 
  StructField("acct_num", IntegerType()),
  StructField("dev_id", StringType()),
  StructField("phone", StringType()),
  StructField("model", StringType())])

activationsStreamDF = kafkaActivationsDF.select("timestamp",from_json(kafkaActivationsDF.value.cast("string"), activationsSchema).alias("activation"))

statusDF=statusStreamDF.select(statusStreamDF.timestamp.alias("timestamp_status"),statusStreamDF.status_vals[0].alias("smodel"),statusStreamDF.status_vals[1].alias("dev_id"))

activationsDF=activationsStreamDF.select(activationsStreamDF.timestamp.alias("timestamp_act"),activationsStreamDF.activation.model.alias("amodel"),activationsStreamDF.activation.dev_id.alias("dev_id"))

joinedDF=statusDF.join(activationsDF,"dev_id")

# Watermark versions of the DFs

statusWDF=statusDF.withWatermark("timestamp_status","10 minutes")

actWDF=activationsDF.withWatermark("timestamp_act","10 minutes")

# specify right-side watermark and time range
# (these are the same with different syntax)
joinedDF=statusDF.join(actWDF,(actWDF.dev_id == statusDF.dev_id) & (statusDF.timestamp_status > actWDF.timestamp_act),"left_outer")

joinQuery=joinedDF.writeStream.outputMode("append").format("console").option("truncate","false").start()

joinQuery.stop()


